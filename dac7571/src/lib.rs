//! Driver for the DAC7571 digital-to-analog converter.
//!
//! # Copyright
//! Copyright (C) 2020 QUARTIQ GmbH - All Rights Reserved
//! Unauthorized usage, editing, or copying is strictly prohibited.
//! Proprietary and confidential.
//!
//! # Note
//! This driver does not support any low-power operation modes.
#![no_std]

use embedded_hal::blocking::i2c::Write;

/// A driver for the DAC7571 digital to analog converter.
pub struct Dac7571<I2C>
where
    I2C: Write,
{
    i2c: I2C,
    address: u8,
    supply_voltage: f32,
}

/// Represents errors that can be generated by the DAC driver.
pub enum Error {
    Bounds,
    Interface,
}

impl<I2C> Dac7571<I2C>
where
    I2C: Write,
{
    /// Construct a new DAC7571 driver.
    ///
    /// # Args
    /// * `i2c` - The I2C interface to use to communicate with the DAC.
    /// * `address` - The I2C address of the device.
    /// * `vdd` - The VDD supplied to the DAC in volts.
    pub fn new(i2c: I2C, address: u8, vdd: f32) -> Self {
        Dac7571 {
            i2c,
            address,
            supply_voltage: vdd,
        }
    }

    /// Construct a default DAC7571.
    ///
    /// # Note
    /// A default configuration assumes 3.3V VDD and the address bit held low.
    ///
    /// # Args
    /// * `i2c` - The I2C interface to use to communicate with the DAC.
    pub fn default(i2c: I2C) -> Self {
        Dac7571::new(i2c, 0x4C, 3.3)
    }

    /// Configure the DAC output voltage.
    ///
    /// # Args
    /// * `voltage` - The desired DAC output voltage.
    ///
    /// # Returns
    /// The voltage nominal DAC output voltage.
    pub fn set_voltage(&mut self, voltage: f32) -> Result<f32, Error> {
        if voltage >= self.supply_voltage || voltage < 0.0 {
            return Err(Error::Bounds);
        }

        let dac_code = (voltage / self.supply_voltage * 4096.0) as u16 & 0xFFF;
        self.i2c
            .write(self.address, &dac_code.to_be_bytes())
            .map_err(|_| Error::Interface)?;

        let dac_output = dac_code as f32 / 4096.0 * self.supply_voltage;
        Ok(dac_output)
    }
}
